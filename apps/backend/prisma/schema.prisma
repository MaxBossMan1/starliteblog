// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts PostCategory[]
  
  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]
  
  @@map("tags")
}

model Post {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  excerpt      String?
  content      String
  featuredImage String?
  metaDescription String?
  isPublished  Boolean   @default(false)
  publishedAt  DateTime?
  viewCount    Int       @default(0)
  readingTime  Int?      // in minutes
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  authorId     String
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories   PostCategory[]
  tags         PostTag[]
  analytics    PostAnalytics[]
  media        Media[]
  
  @@map("posts")
}

model PostCategory {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String

  @@id([postId, tagId])
  @@map("post_tags")
}

model Media {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // in bytes
  url         String
  alt         String?
  caption     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  postId      String?
  post        Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  
  @@map("media")
}

model PostAnalytics {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Analytics data
  viewedAt  DateTime @default(now())
  ipAddress String?
  userAgent String?
  referrer  String?
  
  @@map("post_analytics")
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  isActive    Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  
  @@map("newsletter_subscribers")
}